basePath: /beetle
definitions:
  common.ConfigInfo:
    properties:
      id:
        example: SPIDER_REST_URL
        type: string
      name:
        example: SPIDER_REST_URL
        type: string
      value:
        example: http://localhost:1024/spider
        type: string
    type: object
  common.ConfigReq:
    properties:
      name:
        example: SPIDER_REST_URL
        type: string
      value:
        example: http://localhost:1024/spider
        type: string
    type: object
  common.ConnConfig:
    properties:
      configName:
        type: string
      credentialName:
        type: string
      driverName:
        type: string
      location:
        $ref: '#/definitions/common.GeoLocation'
      providerName:
        type: string
      regionName:
        type: string
    type: object
  common.GeoLocation:
    properties:
      briefAddr:
        type: string
      cloudType:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      nativeRegion:
        type: string
    type: object
  common.IID:
    properties:
      nameId:
        description: NameID by user
        type: string
      systemId:
        description: SystemID by CloudOS
        type: string
    type: object
  common.IdList:
    properties:
      output:
        items:
          type: string
        type: array
    type: object
  common.JSONResult:
    type: object
  common.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.NsInfo:
    properties:
      description:
        example: Description for this namespace
        type: string
      id:
        example: ns01
        type: string
      name:
        example: ns01
        type: string
    type: object
  common.NsReq:
    properties:
      description:
        example: Description for this namespace
        type: string
      name:
        example: ns01
        type: string
    type: object
  common.RestGetAllConfigResponse:
    properties:
      config:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.ConfigInfo'
        type: array
    type: object
  common.RestGetAllNsResponse:
    properties:
      ns:
        description: Name string     `json:"name"`
        items:
          $ref: '#/definitions/common.NsInfo'
        type: array
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  controller.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/model.MyUser'
        type: array
    type: object
  controller.MigrateInfraRequest:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "yes"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mcis in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mcis01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mcis in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.MigrateInfraResponse:
    properties:
      configureCloudAdaptiveNetwork:
        default: "no"
        description: ConfigureCloudAdaptiveNetwork is an option to configure Cloud
          Adaptive Network (CLADNet) ([yes/no] default:yes)
        enum:
        - "yes"
        - "no"
        example: "yes"
        type: string
      description:
        type: string
      id:
        type: string
      installMonAgent:
        default: "yes"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "yes"
        type: string
      label:
        description: Label is for describing the mcis in a keyword (any string can
          be used)
        example: User custom label
        type: string
      name:
        type: string
      newVmList:
        description: List of IDs for new VMs. Return IDs if the VMs are newly added.
          This field should be used for return body only.
        items:
          type: string
        type: array
      placementAlgo:
        type: string
      status:
        type: string
      statusCount:
        $ref: '#/definitions/model.StatusCountInfo'
      systemLabel:
        description: SystemLabel is for describing the mcis in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmInfo'
        type: array
    type: object
  controller.MigrateInstanceRequest:
    properties:
      NetworkId:
        type: string
      id:
        type: string
      name:
        type: string
      os:
        type: string
      type:
        type: string
    type: object
  controller.MigrateInstanceResponse:
    properties:
      NetworkId:
        type: string
      id:
        type: string
      name:
        type: string
      os:
        type: string
      type:
        type: string
    type: object
  controller.MigrateNetworkRequest:
    properties:
      id:
        type: string
      ipv4CidrBlock:
        type: string
      ipv6CidrBlock:
        type: string
      name:
        type: string
      subnets:
        items:
          $ref: '#/definitions/model.Subnet'
        type: array
    type: object
  controller.MigrateNetworkResponse:
    properties:
      id:
        type: string
      ipv4CidrBlock:
        type: string
      ipv6CidrBlock:
        type: string
      name:
        type: string
      subnets:
        items:
          $ref: '#/definitions/model.Subnet'
        type: array
    type: object
  controller.MigrateStorageRequest:
    properties:
      NetworkId:
        type: string
      id:
        type: string
      name:
        type: string
      size:
        type: string
      type:
        type: string
    type: object
  controller.MigrateStorageResponse:
    properties:
      NetworkId:
        type: string
      id:
        type: string
      name:
        type: string
      size:
        type: string
      type:
        type: string
    type: object
  controller.PatchUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.PatchUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.RecommendInfraRequest:
    properties:
      compute:
        $ref: '#/definitions/infra.Compute'
    type: object
  controller.RecommendInfraResponse:
    properties:
      compute:
        type: string
      disk:
        type: string
      network:
        type: string
      securityGroup:
        type: string
      virtualMachine:
        type: string
    type: object
  controller.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  infra.CPU:
    properties:
      cache:
        description: KB
        type: integer
      cores:
        description: ea
        type: integer
      cpus:
        description: ea
        type: integer
      model:
        type: string
      speed:
        description: MHz
        type: integer
      threads:
        description: ea
        type: integer
      vendor:
        type: string
    type: object
  infra.Compute:
    properties:
      compute_resource:
        $ref: '#/definitions/infra.ComputeResource'
      os:
        $ref: '#/definitions/infra.System'
    type: object
  infra.ComputeResource:
    properties:
      cpu:
        $ref: '#/definitions/infra.CPU'
      memory:
        $ref: '#/definitions/infra.Memory'
      storage:
        items:
          $ref: '#/definitions/infra.Storage'
        type: array
    type: object
  infra.Kernel:
    properties:
      architecture:
        type: string
      release:
        type: string
      version:
        type: string
    type: object
  infra.Memory:
    properties:
      size:
        description: MB
        type: integer
      speed:
        description: MHz
        type: integer
      type:
        type: string
    type: object
  infra.Node:
    properties:
      hostname:
        type: string
      hypervisor:
        type: string
      machineid:
        type: string
      timezone:
        type: string
    type: object
  infra.OS:
    properties:
      architecture:
        type: string
      name:
        type: string
      release:
        type: string
      vendor:
        type: string
      version:
        type: string
    type: object
  infra.Storage:
    properties:
      driver:
        type: string
      model:
        type: string
      name:
        type: string
      serial:
        type: string
      size:
        description: GB
        type: integer
      vendor:
        type: string
    type: object
  infra.System:
    properties:
      kernel:
        $ref: '#/definitions/infra.Kernel'
      node:
        $ref: '#/definitions/infra.Node'
      os:
        $ref: '#/definitions/infra.OS'
    type: object
  model.MyUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.RegionInfo:
    properties:
      region:
        type: string
      zone:
        type: string
    type: object
  model.SpiderVMInfo:
    properties:
      cspid:
        description: VM ID given by CSP (required for registering VM)
        type: string
      dataDiskIIDs:
        items:
          $ref: '#/definitions/common.IID'
        type: array
      dataDiskNames:
        items:
          type: string
        type: array
      iid:
        allOf:
        - $ref: '#/definitions/common.IID'
        description: Fields for response
      imageIId:
        $ref: '#/definitions/common.IID'
      imageName:
        type: string
      imageType:
        type: string
      keyPairIId:
        $ref: '#/definitions/common.IID'
      keyPairName:
        type: string
      keyValueList:
        items:
          $ref: '#/definitions/common.KeyValue'
        type: array
      name:
        description: Fields for request
        type: string
      networkInterface:
        description: ex) eth0
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        allOf:
        - $ref: '#/definitions/model.RegionInfo'
        description: ex) {us-east1, us-east1-c} or {ap-northeast-2}
      rootDeviceName:
        description: '"/dev/sda1", ...'
        type: string
      rootDiskSize:
        description: '"default", "50", "1000" (GB)'
        type: string
      rootDiskType:
        description: '"SSD(gp2)", "Premium SSD", ...'
        type: string
      securityGroupIIds:
        description: AWS, ex) sg-0b7452563e1121bb6
        items:
          $ref: '#/definitions/common.IID'
        type: array
      securityGroupNames:
        items:
          type: string
        type: array
      sshaccessPoint:
        type: string
      startTime:
        type: string
      subnetIID:
        allOf:
        - $ref: '#/definitions/common.IID'
        description: AWS, ex) subnet-8c4a53e4
      subnetName:
        type: string
      vmspecName:
        description: Fields for both request and response
        type: string
      vmuserId:
        description: ex) user1
        type: string
      vmuserPasswd:
        type: string
      vpcIID:
        $ref: '#/definitions/common.IID'
      vpcname:
        type: string
    type: object
  model.StatusCountInfo:
    properties:
      countCreating:
        description: CountCreating is for counting Creating
        type: integer
      countFailed:
        description: CountFailed is for counting Failed
        type: integer
      countRebooting:
        description: CountRebooting is for counting Rebooting
        type: integer
      countResuming:
        description: CountResuming is for counting Resuming
        type: integer
      countRunning:
        description: CountRunning is for counting Running
        type: integer
      countSuspended:
        description: CountSuspended is for counting Suspended
        type: integer
      countSuspending:
        description: CountSuspending is for counting Suspending
        type: integer
      countTerminated:
        description: CountTerminated is for counting Terminated
        type: integer
      countTerminating:
        description: CountTerminating is for counting Terminating
        type: integer
      countTotal:
        description: CountTotal is for Total VMs
        type: integer
      countUndefined:
        description: CountUndefined is for counting Undefined
        type: integer
    type: object
  model.Subnet:
    properties:
      id:
        type: string
      ipv4CidrBlock:
        type: string
      ipv6CidrBlock:
        type: string
      name:
        type: string
      parentNetworkId:
        type: string
    type: object
  model.TbVmDynamicReq:
    properties:
      commonImage:
        description: CommonImage is field for id of a image in common namespace
        example: ubuntu18.04
        type: string
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example: aws-ap-northeast-2-t2-small
        type: string
      connectionName:
        description: |-
          if ConnectionName is given, the VM tries to use associtated credential.
          if not, it will use predefined ConnectionName in Spec objects
        type: string
      description:
        example: Description
        type: string
      label:
        example: DynamicVM
        type: string
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_essd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      subGroupSize:
        description: if subGroupSize is (not empty) && (> 0), subGroup will be gernetad.
          VMs will be created accordingly.
        example: "3"
        type: string
      vmUserPassword:
        type: string
    required:
    - commonImage
    - commonSpec
    type: object
  model.TbVmInfo:
    properties:
      connectionConfig:
        $ref: '#/definitions/common.ConnConfig'
      connectionName:
        type: string
      createdTime:
        description: Created time
        example: "2022-11-10 23:00:00"
        type: string
      cspViewVmDetail:
        $ref: '#/definitions/model.SpiderVMInfo'
      dataDiskIds:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        type: string
      idByCSP:
        description: CSP managed ID or Name
        type: string
      imageId:
        type: string
      label:
        type: string
      location:
        $ref: '#/definitions/common.GeoLocation'
      monAgentStatus:
        description: Montoring agent status
        example: '[installed, notInstalled, failed]'
        type: string
      name:
        type: string
      networkAgentStatus:
        description: NetworkAgent status
        example: '[notInstalled, installing, installed, failed]'
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        allOf:
        - $ref: '#/definitions/model.RegionInfo'
        description: AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}
      rootDeviceName:
        type: string
      rootDiskSize:
        type: string
      rootDiskType:
        type: string
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      sshPort:
        type: string
      status:
        description: Required by CB-Tumblebug
        type: string
      subGroupId:
        description: defined if the VM is in a group
        type: string
      subnetId:
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      vNetId:
        type: string
      vmUserAccount:
        type: string
      vmUserPassword:
        type: string
    type: object
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: CM-Beetle REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CM-Beetle REST API
  version: latest
paths:
  /config:
    delete:
      consumes:
      - application/json
      description: Init all configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Init all configs
      tags:
      - '[Admin] System environment'
    get:
      consumes:
      - application/json
      description: List all configs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.RestGetAllConfigResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all configs
      tags:
      - '[Admin] System environment'
    post:
      consumes:
      - application/json
      description: Create or Update config (SPIDER_REST_URL, DRAGONFLY_REST_URL, ...)
      parameters:
      - description: Key and Value for configuration
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/common.ConfigReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create or Update config
      tags:
      - '[Admin] System environment'
  /config/{configId}:
    delete:
      consumes:
      - application/json
      description: Init config
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Init config
      tags:
      - '[Admin] System environment'
    get:
      consumes:
      - application/json
      description: Get config
      parameters:
      - description: Config ID
        in: path
        name: configId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfigInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get config
      tags:
      - '[Admin] System environment'
  /health:
    get:
      consumes:
      - application/json
      description: Check Beetle is alive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check Beetle is alive
      tags:
      - '[Admin] System management'
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Check HTTP version of incoming request
      tags:
      - '[Admin] System management'
  /migration/infra:
    post:
      consumes:
      - application/json
      description: It migrates an infrastructure on a cloud platform. Infrastructure
        includes network, storage, compute, and so on.
      parameters:
      - description: Specify network, disk, compute, security group, virtual machine,
          etc.
        in: body
        name: InfrastructureInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateInfraRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated infrastructure on a cloud platform
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Migrate an infrastructure on a cloud platform
      tags:
      - '[Migration] Infrastructure'
  /migration/infra/instance:
    post:
      consumes:
      - application/json
      description: It migrates instance on a cloud platform. Storage includes name,
        spec, OS, and so on.
      parameters:
      - description: Specify name, spec, OS, and so on.
        in: body
        name: InstanceInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateInstanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated storage on a cloud platform
          schema:
            $ref: '#/definitions/controller.MigrateInstanceResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: (Skeleton) Migrate instance on a cloud platform
      tags:
      - '[Migration] Infrastructure'
  /migration/infra/network:
    post:
      consumes:
      - application/json
      description: It migrates network on a cloud platform. Network includes name,
        ID, IPv4 CIDR block, IPv6 CIDR block, and so on.
      parameters:
      - description: Specify name, IPv4 CIDR block, etc.
        in: body
        name: NetworkInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateNetworkRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated network on a cloud platform
          schema:
            $ref: '#/definitions/controller.MigrateNetworkResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: (Skeleton) Migrate network on a cloud platform
      tags:
      - '[Migration] Infrastructure'
  /migration/infra/storage:
    post:
      consumes:
      - application/json
      description: It migrates storage on a cloud platform. Storage includes name,
        ID, type, size, and so on.
      parameters:
      - description: Specify name, type, size, affiliated Network ID, and so on.
        in: body
        name: StorageInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateStorageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated storage on a cloud platform
          schema:
            $ref: '#/definitions/controller.MigrateStorageResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: (Skeleton) Migrate storage on a cloud platform
      tags:
      - '[Migration] Infrastructure'
  /ns:
    delete:
      consumes:
      - application/json
      description: Delete all namespaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete all namespaces
      tags:
      - '[Namespace] Namespace management'
    get:
      consumes:
      - application/json
      description: List all namespaces or namespaces' ID
      parameters:
      - description: Option
        enum:
        - id
        in: query
        name: option
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Different return structures by the given option param
          schema:
            allOf:
            - $ref: '#/definitions/common.JSONResult'
            - properties:
                '[DEFAULT]':
                  $ref: '#/definitions/common.RestGetAllNsResponse'
                '[ID]':
                  $ref: '#/definitions/common.IdList'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: List all namespaces or namespaces' ID
      tags:
      - '[Namespace] Namespace management'
    post:
      consumes:
      - application/json
      description: Create namespace
      parameters:
      - description: Details for a new namespace
        in: body
        name: nsReq
        required: true
        schema:
          $ref: '#/definitions/common.NsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Create namespace
      tags:
      - '[Namespace] Namespace management'
  /ns/{nsId}:
    delete:
      consumes:
      - application/json
      description: Delete namespace
      parameters:
      - default: ns01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Delete namespace
      tags:
      - '[Namespace] Namespace management'
    get:
      consumes:
      - application/json
      description: Get namespace
      parameters:
      - default: ns01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Get namespace
      tags:
      - '[Namespace] Namespace management'
    put:
      consumes:
      - application/json
      description: Update namespace
      parameters:
      - default: ns01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Details to update existing namespace
        in: body
        name: namespace
        required: true
        schema:
          $ref: '#/definitions/common.NsReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.NsInfo'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Update namespace
      tags:
      - '[Namespace] Namespace management'
  /recommendation/infra:
    post:
      consumes:
      - application/json
      description: It recommends a cloud infrastructure most similar to the input.
        Infrastructure includes network, storage, compute, and so on.
      parameters:
      - description: Specify network, disk, compute, security group, virtual machine,
          etc.
        in: body
        name: UserInfrastructure
        required: true
        schema:
          $ref: '#/definitions/controller.RecommendInfraRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully recommended an appropriate infrastructure for
            cloud migration
          schema:
            $ref: '#/definitions/controller.RecommendInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Recommend an appropriate infrastructure for cloud migration
      tags:
      - '[Recommendation] Infrastructure'
  /sample/users:
    get:
      consumes:
      - application/json
      description: Get information of all users.
      produces:
      - application/json
      responses:
        "200":
          description: (sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUsersResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get a list of users
      tags:
      - '[Sample] Users'
    post:
      consumes:
      - application/json
      description: Create a new user with the given information.
      parameters:
      - description: User information
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Create a new user
      tags:
      - '[Sample] Users'
  /sample/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deletion successful
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Delete a user
      tags:
      - '[Sample] Users'
    get:
      consumes:
      - application/json
      description: Get information of a user with a specific ID.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get specific user information
      tags:
      - '[Sample] Users'
    patch:
      consumes:
      - application/json
      description: Patch a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.PatchUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Patch a user
      tags:
      - '[Sample] Users'
    put:
      consumes:
      - application/json
      description: Update a user with the given information.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.UpdateUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Update a user
      tags:
      - '[Sample] Users'
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
