// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://cloud-barista.github.io",
            "email": "contact-to-cloud-barista@googlegroups.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/config": {
            "get": {
                "description": "List all configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System environment"
                ],
                "summary": "List all configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.RestGetAllConfigResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "post": {
                "description": "Create or Update config (SPIDER_REST_URL, DRAGONFLY_REST_URL, ...)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System environment"
                ],
                "summary": "Create or Update config",
                "parameters": [
                    {
                        "description": "Key and Value for configuration",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common.ConfigReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.ConfigInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "delete": {
                "description": "Init all configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System environment"
                ],
                "summary": "Init all configs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/config/{configId}": {
            "get": {
                "description": "Get config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System environment"
                ],
                "summary": "Get config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "configId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.ConfigInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "delete": {
                "description": "Init config",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System environment"
                ],
                "summary": "Init config",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Config ID",
                        "name": "configId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.ConfigInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check Beetle is alive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System management"
                ],
                "summary": "Check Beetle is alive",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/httpVersion": {
            "get": {
                "description": "Checks and logs the HTTP version of the incoming request to the server console.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System management"
                ],
                "summary": "Check HTTP version of incoming request",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/migration/infra": {
            "post": {
                "description": "It migrates an infrastructure on a cloud platform. Infrastructure includes network, storage, compute, and so on.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Migration] Infrastructure"
                ],
                "summary": "Migrate an infrastructure on a cloud platform",
                "parameters": [
                    {
                        "description": "Specify network, disk, compute, security group, virtual machine, etc.",
                        "name": "InfrastructureInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/migration.MigrateInfraRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully migrated infrastructure on a cloud platform",
                        "schema": {
                            "$ref": "#/definitions/migration.MigrateInfraResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/ns": {
            "get": {
                "description": "List all namespaces or namespaces' ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "List all namespaces or namespaces' ID",
                "parameters": [
                    {
                        "enum": [
                            "id"
                        ],
                        "type": "string",
                        "description": "Option",
                        "name": "option",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Different return structures by the given option param",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.JSONResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "[DEFAULT]": {
                                            "$ref": "#/definitions/common.RestGetAllNsResponse"
                                        },
                                        "[ID]": {
                                            "$ref": "#/definitions/common.IdList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "post": {
                "description": "Create namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "Create namespace",
                "parameters": [
                    {
                        "description": "Details for a new namespace",
                        "name": "nsReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common.NsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.NsInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all namespaces",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "Delete all namespaces",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/ns/{nsId}": {
            "get": {
                "description": "Get namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "Get namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "ns01",
                        "description": "Namespace ID",
                        "name": "nsId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.NsInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "put": {
                "description": "Update namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "Update namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "ns01",
                        "description": "Namespace ID",
                        "name": "nsId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Details to update existing namespace",
                        "name": "namespace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common.NsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.NsInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management"
                ],
                "summary": "Delete namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "ns01",
                        "description": "Namespace ID",
                        "name": "nsId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/recommendation/infra": {
            "post": {
                "description": "It recommends a cloud infrastructure most similar to the input. Infrastructure includes network, storage, compute, and so on.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Recommendation] Infrastructure"
                ],
                "summary": "Recommend an appropriate infrastructure for cloud migration",
                "parameters": [
                    {
                        "description": "Specify network, disk, compute, security group, virtual machine, etc.",
                        "name": "UserInfrastructure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/recommendation.RecommendInfraRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully recommended an appropriate infrastructure for cloud migration",
                        "schema": {
                            "$ref": "#/definitions/recommendation.RecommendInfraResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "common.ConfigInfo": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "SPIDER_REST_URL"
                },
                "name": {
                    "type": "string",
                    "example": "SPIDER_REST_URL"
                },
                "value": {
                    "type": "string",
                    "example": "http://localhost:1024/spider"
                }
            }
        },
        "common.ConfigReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "SPIDER_REST_URL"
                },
                "value": {
                    "type": "string",
                    "example": "http://localhost:1024/spider"
                }
            }
        },
        "common.ConnConfig": {
            "type": "object",
            "properties": {
                "configName": {
                    "type": "string"
                },
                "credentialName": {
                    "type": "string"
                },
                "driverName": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/common.GeoLocation"
                },
                "providerName": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                }
            }
        },
        "common.GeoLocation": {
            "type": "object",
            "properties": {
                "briefAddr": {
                    "type": "string"
                },
                "cloudType": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "nativeRegion": {
                    "type": "string"
                }
            }
        },
        "common.IID": {
            "type": "object",
            "properties": {
                "nameId": {
                    "description": "NameID by user",
                    "type": "string"
                },
                "systemId": {
                    "description": "SystemID by CloudOS",
                    "type": "string"
                }
            }
        },
        "common.IdList": {
            "type": "object",
            "properties": {
                "output": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "common.JSONResult": {
            "type": "object"
        },
        "common.KeyValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.NsInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description for this namespace"
                },
                "id": {
                    "type": "string",
                    "example": "ns01"
                },
                "name": {
                    "type": "string",
                    "example": "ns01"
                }
            }
        },
        "common.NsReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description for this namespace"
                },
                "name": {
                    "type": "string",
                    "example": "ns01"
                }
            }
        },
        "common.RestGetAllConfigResponse": {
            "type": "object",
            "properties": {
                "config": {
                    "description": "Name string     ` + "`" + `json:\"name\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.ConfigInfo"
                    }
                }
            }
        },
        "common.RestGetAllNsResponse": {
            "type": "object",
            "properties": {
                "ns": {
                    "description": "Name string     ` + "`" + `json:\"name\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.NsInfo"
                    }
                }
            }
        },
        "common.SimpleMsg": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Any message"
                }
            }
        },
        "migration.MigrateInfraRequest": {
            "type": "object",
            "required": [
                "name",
                "vm"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Made in CB-TB"
                },
                "installMonAgent": {
                    "description": "InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)",
                    "type": "string",
                    "default": "yes",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "no"
                },
                "label": {
                    "description": "Label is for describing the mcis in a keyword (any string can be used)",
                    "type": "string",
                    "example": "DynamicVM"
                },
                "name": {
                    "type": "string",
                    "example": "mcis01"
                },
                "systemLabel": {
                    "description": "SystemLabel is for describing the mcis in a keyword (any string can be used) for special System purpose",
                    "type": "string",
                    "example": ""
                },
                "vm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/migration.TbVmDynamicReq"
                    }
                }
            }
        },
        "migration.MigrateInfraResponse": {
            "type": "object",
            "properties": {
                "configureCloudAdaptiveNetwork": {
                    "description": "ConfigureCloudAdaptiveNetwork is an option to configure Cloud Adaptive Network (CLADNet) ([yes/no] default:yes)",
                    "type": "string",
                    "default": "no",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "yes"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installMonAgent": {
                    "description": "InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)",
                    "type": "string",
                    "default": "yes",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "yes"
                },
                "label": {
                    "description": "Label is for describing the mcis in a keyword (any string can be used)",
                    "type": "string",
                    "example": "User custom label"
                },
                "name": {
                    "type": "string"
                },
                "newVmList": {
                    "description": "List of IDs for new VMs. Return IDs if the VMs are newly added. This field should be used for return body only.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placementAlgo": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "statusCount": {
                    "$ref": "#/definitions/migration.StatusCountInfo"
                },
                "systemLabel": {
                    "description": "SystemLabel is for describing the mcis in a keyword (any string can be used) for special System purpose",
                    "type": "string",
                    "example": "Managed by CB-Tumblebug"
                },
                "systemMessage": {
                    "description": "Latest system message such as error message",
                    "type": "string",
                    "example": "Failed because ..."
                },
                "targetAction": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                },
                "vm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/migration.TbVmInfo"
                    }
                }
            }
        },
        "migration.RegionInfo": {
            "type": "object",
            "properties": {
                "region": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "migration.SpiderVMInfo": {
            "type": "object",
            "properties": {
                "cspid": {
                    "description": "VM ID given by CSP (required for registering VM)",
                    "type": "string"
                },
                "dataDiskIIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.IID"
                    }
                },
                "dataDiskNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "iid": {
                    "description": "Fields for response",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common.IID"
                        }
                    ]
                },
                "imageIId": {
                    "$ref": "#/definitions/common.IID"
                },
                "imageName": {
                    "type": "string"
                },
                "imageType": {
                    "type": "string"
                },
                "keyPairIId": {
                    "$ref": "#/definitions/common.IID"
                },
                "keyPairName": {
                    "type": "string"
                },
                "keyValueList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValue"
                    }
                },
                "name": {
                    "description": "Fields for request",
                    "type": "string"
                },
                "networkInterface": {
                    "description": "ex) eth0",
                    "type": "string"
                },
                "privateDNS": {
                    "type": "string"
                },
                "privateIP": {
                    "type": "string"
                },
                "publicDNS": {
                    "type": "string"
                },
                "publicIP": {
                    "type": "string"
                },
                "region": {
                    "description": "ex) {us-east1, us-east1-c} or {ap-northeast-2}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/migration.RegionInfo"
                        }
                    ]
                },
                "rootDeviceName": {
                    "description": "\"/dev/sda1\", ...",
                    "type": "string"
                },
                "rootDiskSize": {
                    "description": "\"default\", \"50\", \"1000\" (GB)",
                    "type": "string"
                },
                "rootDiskType": {
                    "description": "\"SSD(gp2)\", \"Premium SSD\", ...",
                    "type": "string"
                },
                "securityGroupIIds": {
                    "description": "AWS, ex) sg-0b7452563e1121bb6",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.IID"
                    }
                },
                "securityGroupNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sshaccessPoint": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "subnetIID": {
                    "description": "AWS, ex) subnet-8c4a53e4",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common.IID"
                        }
                    ]
                },
                "subnetName": {
                    "type": "string"
                },
                "vmspecName": {
                    "description": "Fields for both request and response",
                    "type": "string"
                },
                "vmuserId": {
                    "description": "ex) user1",
                    "type": "string"
                },
                "vmuserPasswd": {
                    "type": "string"
                },
                "vpcIID": {
                    "$ref": "#/definitions/common.IID"
                },
                "vpcname": {
                    "type": "string"
                }
            }
        },
        "migration.StatusCountInfo": {
            "type": "object",
            "properties": {
                "countCreating": {
                    "description": "CountCreating is for counting Creating",
                    "type": "integer"
                },
                "countFailed": {
                    "description": "CountFailed is for counting Failed",
                    "type": "integer"
                },
                "countRebooting": {
                    "description": "CountRebooting is for counting Rebooting",
                    "type": "integer"
                },
                "countResuming": {
                    "description": "CountResuming is for counting Resuming",
                    "type": "integer"
                },
                "countRunning": {
                    "description": "CountRunning is for counting Running",
                    "type": "integer"
                },
                "countSuspended": {
                    "description": "CountSuspended is for counting Suspended",
                    "type": "integer"
                },
                "countSuspending": {
                    "description": "CountSuspending is for counting Suspending",
                    "type": "integer"
                },
                "countTerminated": {
                    "description": "CountTerminated is for counting Terminated",
                    "type": "integer"
                },
                "countTerminating": {
                    "description": "CountTerminating is for counting Terminating",
                    "type": "integer"
                },
                "countTotal": {
                    "description": "CountTotal is for Total VMs",
                    "type": "integer"
                },
                "countUndefined": {
                    "description": "CountUndefined is for counting Undefined",
                    "type": "integer"
                }
            }
        },
        "migration.TbVmDynamicReq": {
            "type": "object",
            "required": [
                "commonImage",
                "commonSpec"
            ],
            "properties": {
                "commonImage": {
                    "description": "CommonImage is field for id of a image in common namespace",
                    "type": "string",
                    "example": "ubuntu18.04"
                },
                "commonSpec": {
                    "description": "CommonSpec is field for id of a spec in common namespace",
                    "type": "string",
                    "example": "aws-ap-northeast-2-t2-small"
                },
                "connectionName": {
                    "description": "if ConnectionName is given, the VM tries to use associtated credential.\nif not, it will use predefined ConnectionName in Spec objects",
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Description"
                },
                "label": {
                    "type": "string",
                    "example": "DynamicVM"
                },
                "name": {
                    "description": "VM name or subGroup name if is (not empty) \u0026\u0026 (\u003e 0). If it is a group, actual VM name will be generated with -N postfix.",
                    "type": "string",
                    "example": "g1-1"
                },
                "rootDiskSize": {
                    "description": "\"default\", Integer (GB): [\"50\", ..., \"1000\"]",
                    "type": "string",
                    "example": "default, 30, 42, ..."
                },
                "rootDiskType": {
                    "description": "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\", \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"], GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"], ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_essd\"], TENCENT: [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]",
                    "type": "string",
                    "example": "default, TYPE1, ..."
                },
                "subGroupSize": {
                    "description": "if subGroupSize is (not empty) \u0026\u0026 (\u003e 0), subGroup will be gernetad. VMs will be created accordingly.",
                    "type": "string",
                    "example": "3"
                },
                "vmUserPassword default:": {
                    "type": "string"
                }
            }
        },
        "migration.TbVmInfo": {
            "type": "object",
            "properties": {
                "connectionConfig": {
                    "$ref": "#/definitions/common.ConnConfig"
                },
                "connectionName": {
                    "type": "string"
                },
                "createdTime": {
                    "description": "Created time",
                    "type": "string",
                    "example": "2022-11-10 23:00:00"
                },
                "cspViewVmDetail": {
                    "$ref": "#/definitions/migration.SpiderVMInfo"
                },
                "dataDiskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idByCSP": {
                    "description": "CSP managed ID or Name",
                    "type": "string"
                },
                "imageId": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/common.GeoLocation"
                },
                "monAgentStatus": {
                    "description": "Montoring agent status",
                    "type": "string",
                    "example": "[installed, notInstalled, failed]"
                },
                "name": {
                    "type": "string"
                },
                "networkAgentStatus": {
                    "description": "NetworkAgent status",
                    "type": "string",
                    "example": "[notInstalled, installing, installed, failed]"
                },
                "privateDNS": {
                    "type": "string"
                },
                "privateIP": {
                    "type": "string"
                },
                "publicDNS": {
                    "type": "string"
                },
                "publicIP": {
                    "type": "string"
                },
                "region": {
                    "description": "AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/migration.RegionInfo"
                        }
                    ]
                },
                "rootDeviceName": {
                    "type": "string"
                },
                "rootDiskSize": {
                    "type": "string"
                },
                "rootDiskType": {
                    "type": "string"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "specId": {
                    "type": "string"
                },
                "sshKeyId": {
                    "type": "string"
                },
                "sshPort": {
                    "type": "string"
                },
                "status": {
                    "description": "Required by CB-Tumblebug",
                    "type": "string"
                },
                "subGroupId": {
                    "description": "defined if the VM is in a group",
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "systemMessage": {
                    "description": "Latest system message such as error message",
                    "type": "string",
                    "example": "Failed because ..."
                },
                "targetAction": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                },
                "vNetId": {
                    "type": "string"
                },
                "vmUserAccount": {
                    "type": "string"
                },
                "vmUserPassword": {
                    "type": "string"
                }
            }
        },
        "recommendation.RecommendInfraRequest": {
            "type": "object",
            "properties": {
                "compute": {
                    "type": "string"
                },
                "disk": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "securityGroup": {
                    "type": "string"
                },
                "virtualMachine": {
                    "type": "string"
                }
            }
        },
        "recommendation.RecommendInfraResponse": {
            "type": "object",
            "properties": {
                "compute": {
                    "type": "string"
                },
                "disk": {
                    "type": "string"
                },
                "network": {
                    "type": "string"
                },
                "securityGroup": {
                    "type": "string"
                },
                "virtualMachine": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "latest",
	Host:             "",
	BasePath:         "/beetle",
	Schemes:          []string{},
	Title:            "CM-Beetle REST API",
	Description:      "CM-Beetle REST API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
