basePath: /beetle
definitions:
  common.SimpleMessage:
    properties:
      message:
        example: Any message
        type: string
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  controller.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/model.MyUser'
        type: array
    type: object
  controller.MigrateInfraRequest:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.MigrateInfraResponse:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.PatchUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.PatchUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.RecommendInfraRequest:
    properties:
      network:
        $ref: '#/definitions/onprem.NetworkProperty'
      servers:
        items:
          $ref: '#/definitions/onprem.ServerProperty'
        type: array
    required:
    - servers
    type: object
  controller.RecommendInfraResponse:
    properties:
      description:
        type: string
      status:
        type: string
      targetInfra:
        $ref: '#/definitions/model.TbMciDynamicReq'
    type: object
  controller.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.MyUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.Response:
    properties:
      details:
        example: Any details
        type: string
      list:
        items: {}
        type: array
      object:
        additionalProperties: true
        type: object
      success:
        example: true
        type: boolean
      text:
        example: Any text
        type: string
    type: object
  model.TbMciDynamicReq:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  model.TbVmDynamicReq:
    properties:
      commonImage:
        description: CommonImage is field for id of a image in common namespace
        example: ubuntu18.04
        type: string
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example: aws+ap-northeast-2+t2.small
        type: string
      connectionName:
        description: |-
          if ConnectionName is given, the VM tries to use associtated credential.
          if not, it will use predefined ConnectionName in Spec objects
        type: string
      description:
        example: Description
        type: string
      label:
        example: DynamicVM
        type: string
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        default: default
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        default: default
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_essd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      subGroupSize:
        default: "1"
        description: if subGroupSize is (not empty) && (> 0), subGroup will be generated.
          VMs will be created accordingly.
        example: "3"
        type: string
      vmUserPassword:
        type: string
    required:
    - commonImage
    - commonSpec
    type: object
  onprem.CpuProperty:
    properties:
      architecture:
        example: x86_64
        type: string
      cores:
        description: Number of physical cores per CPU
        example: 18
        type: integer
      cpus:
        description: Number of physical CPUs (sockets)
        example: 2
        type: integer
      maxSpeed:
        description: Maximum speed in GHz
        example: 3.6
        type: number
      model:
        example: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz
        type: string
      threads:
        description: Number of logical CPUs (threads) per CPU with hyper-threading
          enabled
        example: 36
        type: integer
      vendor:
        example: GenuineIntel
        type: string
    required:
    - cores
    - cpus
    - threads
    type: object
  onprem.DiskProperty:
    properties:
      available:
        description: Unit GiB
        type: integer
      label:
        type: string
      totalSize:
        description: Unit GiB
        example: 1024
        type: integer
      type:
        description: SSD, HDD
        example: SSD
        type: string
      used:
        description: Unit GiB
        type: integer
    required:
    - label
    - totalSize
    - type
    type: object
  onprem.MemoryProperty:
    properties:
      available:
        description: Unit GiB
        type: integer
      totalSize:
        description: Unit GiB
        example: 128
        type: integer
      type:
        example: DDR4
        type: string
      used:
        description: Unit GiB
        type: integer
    required:
    - totalSize
    - type
    type: object
  onprem.NetworkInterfaceProperty:
    properties:
      ipAddress:
        type: string
      macAddress:
        type: string
      mtu:
        description: Maximum Transmission Unit (MTU) in bytes
        type: integer
    required:
    - ipAddress
    type: object
  onprem.NetworkProperty:
    properties:
      gateway:
        description: Gateway IP address
        example: 172.26.240.0/20
        type: string
    type: object
  onprem.OsProperty:
    properties:
      id:
        example: ubuntu
        type: string
      idLike:
        example: debian
        type: string
      name:
        example: Ubuntu
        type: string
      prettyName:
        description: Pretty name
        example: Ubuntu 22.04.3 LTS
        type: string
      version:
        description: Full version string
        example: 22.04.3 LTS (Jammy Jellyfish)
        type: string
      versionCodename:
        example: jammy
        type: string
      versionId:
        example: "22.04"
        type: string
    required:
    - prettyName
    type: object
  onprem.ServerProperty:
    properties:
      cpu:
        $ref: '#/definitions/onprem.CpuProperty'
      dataDisks:
        items:
          $ref: '#/definitions/onprem.DiskProperty'
        type: array
      hostname:
        type: string
      interfaces:
        items:
          $ref: '#/definitions/onprem.NetworkInterfaceProperty'
        type: array
      memory:
        $ref: '#/definitions/onprem.MemoryProperty'
      os:
        $ref: '#/definitions/onprem.OsProperty'
      rootDisk:
        $ref: '#/definitions/onprem.DiskProperty'
    type: object
externalDocs:
  description: ▶▶▶ CB-Tumblebug REST API
  url: http://localhost:8056/tumblebug/api/index.html
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: CM-Beetle REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CM-Beetle REST API
  version: latest
paths:
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check HTTP version of incoming request
      tags:
      - '[Admin] System management'
  /migration/ns/{nsId}/mci:
    post:
      consumes:
      - application/json
      description: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      operationId: MigrateInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Specify the information for the targeted mulci-cloud infrastructure
          (MCI)
        in: body
        name: mciInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateInfraRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated to the multi-cloud infrastructure
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /migration/ns/{nsId}/mci/{mciId}:
    delete:
      consumes:
      - application/json
      description: Delete the migrated mult-cloud infrastructure (MCI)
      operationId: DeleteInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The result of deleting the migrated multi-cloud infrastructure
            (MCI)
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete the migrated mult-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
    get:
      consumes:
      - application/json
      description: Get the migrated multi-cloud infrastructure (MCI)
      operationId: GetInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The migrated multi-cloud infrastructure (MCI) information
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get the migrated multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /readyz:
    get:
      consumes:
      - application/json
      description: Check Beetle is ready
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check Beetle is ready
      tags:
      - '[Admin] System management'
  /recommendation/mci:
    post:
      consumes:
      - application/json
      description: Recommend an appropriate multi-cloud infrastructure (MCI) for cloud
        migration
      operationId: RecommendInfra
      parameters:
      - description: Specify the your infrastructure to be migrated
        in: body
        name: UserInfra
        required: true
        schema:
          $ref: '#/definitions/controller.RecommendInfraRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The result of recommended infrastructure
          schema:
            $ref: '#/definitions/controller.RecommendInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Recommend an appropriate multi-cloud infrastructure (MCI) for cloud
        migration
      tags:
      - '[Recommendation] Infrastructure'
  /sample/users:
    get:
      consumes:
      - application/json
      description: Get information of all users.
      operationId: GetUsers
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUsersResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get a list of users
      tags:
      - '[Sample API] Users'
    post:
      consumes:
      - application/json
      description: Create a new user with the given information.
      operationId: CreateUser
      parameters:
      - description: User information
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Create a new user
      tags:
      - '[Sample API] Users'
  /sample/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the given information.
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deletion successful
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Delete a user
      tags:
      - '[Sample API] Users'
    get:
      consumes:
      - application/json
      description: Get information of a user with a specific ID.
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get specific user information
      tags:
      - '[Sample API] Users'
    patch:
      consumes:
      - application/json
      description: Patch a user with the given information.
      operationId: PatchUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.PatchUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.PatchUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Patch a user
      tags:
      - '[Sample API] Users'
    put:
      consumes:
      - application/json
      description: Update a user with the given information.
      operationId: UpdateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.UpdateUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Update a user
      tags:
      - '[Sample API] Users'
  /test/tracing:
    get:
      consumes:
      - application/json
      description: Test tracing to Tumblebug
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: x-request-id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Test tracing to Tumblebug
      tags:
      - '[Test] Utility'
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
