basePath: /beetle
definitions:
  common.SimpleMessage:
    properties:
      message:
        example: Any message
        type: string
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  controller.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/model.MyUser'
        type: array
    type: object
  controller.MigrateInfraRequest:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.MigrateInfraResponse:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.PatchUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.PatchUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.RecommendInfraRequest:
    properties:
      servers:
        items:
          $ref: '#/definitions/infra.Infra'
        type: array
    required:
    - servers
    type: object
  controller.RecommendInfraResponse:
    properties:
      description:
        type: string
      status:
        type: string
      targetInfra:
        $ref: '#/definitions/model.TbMciDynamicReq'
    type: object
  controller.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  infra.CPU:
    properties:
      cache:
        description: KB
        type: integer
      cores:
        description: ea
        type: integer
      cpus:
        description: ea
        type: integer
      max_speed:
        description: MHz
        type: integer
      model:
        type: string
      threads:
        description: ea
        type: integer
      vendor:
        type: string
    required:
    - cores
    - cpus
    - threads
    type: object
  infra.Compute:
    properties:
      compute_resource:
        $ref: '#/definitions/infra.ComputeResource'
      connection:
        items:
          $ref: '#/definitions/infra.Connection'
        type: array
      os:
        $ref: '#/definitions/infra.System'
    required:
    - compute_resource
    - os
    type: object
  infra.ComputeResource:
    properties:
      cpu:
        $ref: '#/definitions/infra.CPU'
      data_disk:
        items:
          $ref: '#/definitions/infra.Disk'
        type: array
      memory:
        $ref: '#/definitions/infra.Memory'
      root_disk:
        $ref: '#/definitions/infra.Disk'
    required:
    - cpu
    - memory
    type: object
  infra.Connection:
    properties:
      keypair:
        $ref: '#/definitions/infra.Keypair'
    type: object
  infra.DRM:
    properties:
      driver_date:
        type: string
      driver_description:
        type: string
      driver_name:
        type: string
      driver_version:
        type: string
    type: object
  infra.Disk:
    properties:
      label:
        type: string
      size:
        description: GB
        type: integer
      type:
        type: string
    type: object
  infra.GPU:
    properties:
      drm:
        items:
          $ref: '#/definitions/infra.DRM'
        type: array
      nvidia:
        items:
          $ref: '#/definitions/infra.NVIDIA'
        type: array
    type: object
  infra.Infra:
    properties:
      compute:
        $ref: '#/definitions/infra.Compute'
      gpu:
        $ref: '#/definitions/infra.GPU'
      network:
        $ref: '#/definitions/network.Network'
      storage:
        $ref: '#/definitions/infra.Storage'
    type: object
  infra.Kernel:
    properties:
      architecture:
        type: string
      release:
        type: string
      version:
        type: string
    type: object
  infra.Keypair:
    properties:
      name:
        type: string
      private_key:
        type: string
      public_key:
        type: string
    type: object
  infra.Memory:
    properties:
      size:
        description: MB
        type: integer
      speed:
        description: MHz
        type: integer
      type:
        type: string
    required:
    - size
    type: object
  infra.MountPoint:
    properties:
      mounted_information:
        items:
          $ref: '#/definitions/infra.MountedInformation'
        type: array
    type: object
  infra.MountedInformation:
    properties:
      destination:
        type: string
      filesystem:
        type: string
      option:
        type: string
      source:
        type: string
    type: object
  infra.NVIDIA:
    properties:
      device_attribute:
        $ref: '#/definitions/infra.NVIDIADeviceAttribute'
      performance:
        $ref: '#/definitions/infra.NVIDIAPerformance'
    type: object
  infra.NVIDIADeviceAttribute:
    properties:
      cuda_version:
        type: string
      driver_version:
        type: string
      gpu_uuid:
        type: string
      product_architecture:
        type: string
      product_brand:
        type: string
      product_name:
        type: string
    type: object
  infra.NVIDIAPerformance:
    properties:
      bar1_memory_total:
        description: mb
        type: integer
      bar1_memory_usage:
        description: percent
        type: integer
      bar1_memory_used:
        description: mb
        type: integer
      fb_memory_total:
        description: mb
        type: integer
      fb_memory_usage:
        description: percent
        type: integer
      fb_memory_used:
        description: mb
        type: integer
      gpu_usage:
        description: percent
        type: integer
    type: object
  infra.Node:
    properties:
      hostname:
        type: string
      hypervisor:
        type: string
      machineid:
        type: string
      timezone:
        type: string
    type: object
  infra.OS:
    properties:
      architecture:
        type: string
      name:
        type: string
      release:
        type: string
      vendor:
        type: string
      version:
        type: string
    required:
    - release
    - vendor
    type: object
  infra.Storage:
    properties:
      mount_point:
        $ref: '#/definitions/infra.MountPoint'
    type: object
  infra.System:
    properties:
      kernel:
        $ref: '#/definitions/infra.Kernel'
      node:
        $ref: '#/definitions/infra.Node'
      os:
        $ref: '#/definitions/infra.OS'
    required:
    - os
    type: object
  model.MyUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  model.Response:
    properties:
      details:
        example: Any details
        type: string
      list:
        items: {}
        type: array
      object:
        additionalProperties: true
        type: object
      success:
        example: true
        type: boolean
      text:
        example: Any text
        type: string
    type: object
  model.TbMciDynamicReq:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:yes)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        description: Label is for describing the mci in a keyword (any string can
          be used)
        example: DynamicVM
        type: string
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  model.TbVmDynamicReq:
    properties:
      commonImage:
        description: CommonImage is field for id of a image in common namespace
        example: ubuntu18.04
        type: string
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example: aws+ap-northeast-2+t2.small
        type: string
      connectionName:
        description: |-
          if ConnectionName is given, the VM tries to use associtated credential.
          if not, it will use predefined ConnectionName in Spec objects
        type: string
      description:
        example: Description
        type: string
      label:
        example: DynamicVM
        type: string
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        default: default
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        default: default
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_essd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      subGroupSize:
        default: "1"
        description: if subGroupSize is (not empty) && (> 0), subGroup will be generated.
          VMs will be created accordingly.
        example: "3"
        type: string
      vmUserPassword:
        type: string
    required:
    - commonImage
    - commonSpec
    type: object
  network.CSP:
    properties:
      name:
        type: string
      nlb:
        items:
          $ref: '#/definitions/network.NLB'
        type: array
      security_group:
        items:
          $ref: '#/definitions/network.SecurityGroup'
        type: array
      vpc:
        items:
          $ref: '#/definitions/network.VPC'
        type: array
    type: object
  network.DNS:
    properties:
      dns_server:
        description: IPv4 or IPv6 DNS Server Addresses
        items:
          type: string
        type: array
    type: object
  network.FirewallRule:
    properties:
      action:
        description: allow, deny
        type: string
      direction:
        description: inbound, outbound
        type: string
      dst:
        type: string
      dst_ports:
        type: string
      priority:
        description: Lower has higher priority
        type: integer
      protocol:
        description: TCP, UDP, ICMP
        type: string
      src:
        type: string
      src_ports:
        type: string
    type: object
  network.Host:
    properties:
      dns:
        $ref: '#/definitions/network.DNS'
      firewall_rule:
        items:
          $ref: '#/definitions/network.FirewallRule'
        type: array
      network_interface:
        items:
          $ref: '#/definitions/network.NIC'
        type: array
      route:
        items:
          $ref: '#/definitions/network.Route'
        type: array
    type: object
  network.NIC:
    properties:
      address:
        items:
          type: string
        type: array
      gateway:
        items:
          type: string
        type: array
      interface:
        type: string
      mac_address:
        type: string
      mtu:
        type: integer
    type: object
  network.NLB:
    properties:
      description:
        type: string
      health_checker:
        type: string
      id:
        type: string
      listener:
        type: string
      name:
        type: string
      target_group:
        type: string
    type: object
  network.Network:
    properties:
      csp:
        $ref: '#/definitions/network.CSP'
      host:
        $ref: '#/definitions/network.Host'
    type: object
  network.Route:
    properties:
      destination:
        type: string
      netmask:
        type: string
      next_hop:
        type: string
    type: object
  network.SecurityGroup:
    properties:
      description:
        type: string
      firewall_rule:
        items:
          $ref: '#/definitions/network.FirewallRule'
        type: array
      id:
        type: string
      name:
        type: string
      vnet_id:
        type: string
    type: object
  network.Subnet:
    properties:
      ipv4_cidr:
        description: IPv4 Network Address with CIDR Prefix Length
        type: string
      ipv6_cidr:
        description: IPv6 Network Address with CIDR Prefix Length
        type: string
      name:
        type: string
    type: object
  network.VPC:
    properties:
      address_space:
        description: IPv4 CIDR or IPv6 CIDR
        items:
          type: string
        type: array
      dns_server:
        items:
          $ref: '#/definitions/network.DNS'
        type: array
      id:
        type: string
      region:
        type: string
      subnet:
        items:
          $ref: '#/definitions/network.Subnet'
        type: array
    type: object
externalDocs:
  description: ▶▶▶ CB-Tumblebug REST API
  url: http://localhost:8056/tumblebug/api/index.html
info:
  contact:
    email: contact-to-cloud-barista@googlegroups.com
    name: API Support
    url: http://cloud-barista.github.io
  description: CM-Beetle REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CM-Beetle REST API
  version: latest
paths:
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check HTTP version of incoming request
      tags:
      - '[Admin] System management'
  /migration/ns/{nsId}/mci:
    post:
      consumes:
      - application/json
      description: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      operationId: MigrateInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Specify the information for the targeted mulci-cloud infrastructure
          (MCI)
        in: body
        name: mciInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateInfraRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated to the multi-cloud infrastructure
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /migration/ns/{nsId}/mci/{mciId}:
    delete:
      consumes:
      - application/json
      description: Delete the migrated mult-cloud infrastructure (MCI)
      operationId: DeleteInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The result of deleting the migrated multi-cloud infrastructure
            (MCI)
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Delete the migrated mult-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
    get:
      consumes:
      - application/json
      description: Get the migrated multi-cloud infrastructure (MCI)
      operationId: GetInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The migrated multi-cloud infrastructure (MCI) information
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get the migrated multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /readyz:
    get:
      consumes:
      - application/json
      description: Check Beetle is ready
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check Beetle is ready
      tags:
      - '[Admin] System management'
  /recommendation/mci:
    post:
      consumes:
      - application/json
      description: Recommend an appropriate multi-cloud infrastructure (MCI) for cloud
        migration
      operationId: RecommendInfra
      parameters:
      - description: Specify the your infrastructure to be migrated
        in: body
        name: UserInfra
        required: true
        schema:
          $ref: '#/definitions/controller.RecommendInfraRequest'
      produces:
      - application/json
      responses:
        "200":
          description: The result of recommended infrastructure
          schema:
            $ref: '#/definitions/controller.RecommendInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Recommend an appropriate multi-cloud infrastructure (MCI) for cloud
        migration
      tags:
      - '[Recommendation] Infrastructure'
  /sample/users:
    get:
      consumes:
      - application/json
      description: Get information of all users.
      operationId: GetUsers
      produces:
      - application/json
      responses:
        "200":
          description: (sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUsersResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get a list of users
      tags:
      - '[Sample API] Users'
    post:
      consumes:
      - application/json
      description: Create a new user with the given information.
      operationId: CreateUser
      parameters:
      - description: User information
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Create a new user
      tags:
      - '[Sample API] Users'
  /sample/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the given information.
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User deletion successful
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Delete a user
      tags:
      - '[Sample API] Users'
    get:
      consumes:
      - application/json
      description: Get information of a user with a specific ID.
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get specific user information
      tags:
      - '[Sample API] Users'
    patch:
      consumes:
      - application/json
      description: Patch a user with the given information.
      operationId: PatchUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.PatchUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Patch a user
      tags:
      - '[Sample API] Users'
    put:
      consumes:
      - application/json
      description: Update a user with the given information.
      operationId: UpdateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.UpdateUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Update a user
      tags:
      - '[Sample API] Users'
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
