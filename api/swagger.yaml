basePath: /beetle
definitions:
  common.SimpleMessage:
    properties:
      message:
        example: Any message
        type: string
    type: object
  common.SimpleMsg:
    properties:
      message:
        example: Any message
        type: string
    type: object
  controller.CreateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model.MyUser'
        type: array
    type: object
  controller.MigrateInfraRequest:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:no)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        additionalProperties:
          type: string
        description: Label is for describing the object by keywords
        type: object
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.MigrateInfraResponse:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:no)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        additionalProperties:
          type: string
        description: Label is for describing the object by keywords
        type: object
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  controller.PatchUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.PatchUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.RecommendInfraRequest:
    properties:
      desiredProvider:
        example: aws
        type: string
      desiredRegion:
        example: ap-northeast-2
        type: string
      onpremiseInfraModel:
        $ref: '#/definitions/inframodel.OnpremInfra'
    required:
    - onpremiseInfraModel
    type: object
  controller.RecommendInfraResponse:
    properties:
      description:
        type: string
      status:
        type: string
      targetInfra:
        $ref: '#/definitions/model.TbMciDynamicReq'
    type: object
  controller.UpdateUserRequest:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controller.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  github_com_cloud-barista_cm-beetle_pkg_api_rest_model.MyUser:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response:
    properties:
      details:
        example: Any details
        type: string
      list:
        items: {}
        type: array
      object:
        additionalProperties: true
        type: object
      success:
        example: true
        type: boolean
      text:
        example: Any text
        type: string
    type: object
  inframodel.CpuProperty:
    properties:
      architecture:
        example: x86_64
        type: string
      cores:
        description: Number of physical cores per CPU
        example: 18
        type: integer
      cpus:
        description: Number of physical CPUs (sockets)
        example: 2
        type: integer
      maxSpeed:
        description: Maximum speed in GHz
        example: 3.6
        type: number
      model:
        example: Intel(R) Xeon(R) Gold 6140 CPU @ 2.30GHz
        type: string
      threads:
        description: Number of logical CPUs (threads) per CPU with hyper-threading
          enabled
        example: 36
        type: integer
      vendor:
        example: GenuineIntel
        type: string
    required:
    - cores
    - cpus
    - threads
    type: object
  inframodel.DiskProperty:
    properties:
      available:
        description: Unit GiB
        type: integer
      label:
        type: string
      totalSize:
        description: Unit GiB
        example: 1024
        type: integer
      type:
        description: SSD, HDD
        example: SSD
        type: string
      used:
        description: Unit GiB
        type: integer
    required:
    - label
    - totalSize
    - type
    type: object
  inframodel.MemoryProperty:
    properties:
      available:
        description: Unit GiB
        type: integer
      totalSize:
        description: Unit GiB
        example: 128
        type: integer
      type:
        example: DDR4
        type: string
      used:
        description: Unit GiB
        type: integer
    required:
    - totalSize
    - type
    type: object
  inframodel.NetworkInterfaceProperty:
    properties:
      ipv4CidrBlocks:
        description: IPv4 address with prefix length (e.g., 192.168.0.21/24), instead
          of inet addr, Bcast, and Mask
        items:
          type: string
        type: array
      ipv6CidrBlocks:
        description: IPv6 address with prefix length (e.g., "2001:db8::1/64")
        items:
          type: string
        type: array
      macAddress:
        description: MAC address
        type: string
      mtu:
        description: Maximum Transmission Unit (MTU) in bytes
        type: integer
      name:
        description: Interface name (e.g., eth0, ens01, enp0s3)
        type: string
      state:
        description: Interface state (e.g., UP, DOWN)
        type: string
    required:
    - name
    type: object
  inframodel.NetworkProperty:
    properties:
      ipv4Networks:
        example:
        - 172.26.240.0/20
        items:
          type: string
        type: array
      ipv6Networks:
        description: TBD
        items:
          type: string
        type: array
    type: object
  inframodel.OnpremInfra:
    properties:
      network:
        $ref: '#/definitions/inframodel.NetworkProperty'
      servers:
        items:
          $ref: '#/definitions/inframodel.ServerProperty'
        type: array
    required:
    - servers
    type: object
  inframodel.OsProperty:
    properties:
      id:
        example: ubuntu
        type: string
      idLike:
        example: debian
        type: string
      name:
        example: Ubuntu
        type: string
      prettyName:
        description: Pretty name
        example: Ubuntu 22.04.3 LTS
        type: string
      version:
        description: Full version string
        example: 22.04.3 LTS (Jammy Jellyfish)
        type: string
      versionCodename:
        example: jammy
        type: string
      versionId:
        example: "22.04"
        type: string
    required:
    - prettyName
    type: object
  inframodel.RouteProperty:
    properties:
      destination:
        description: Destination network, expressed in CIDR format
        type: string
      gateway:
        description: Gateway address to which packets are forwarded
        type: string
      interface:
        description: Network interface associated with the route
        type: string
      linkState:
        description: Link state of the route (e.g., UP, DOWN)
        type: string
      metric:
        description: Metric value indicating the priority of the route
        type: integer
      protocol:
        description: Protocol used to set the route (e.g., kernel, static)
        type: string
      scope:
        description: Scope of the route (e.g., global, link, host)
        type: string
      source:
        description: Optionally stores the source address (used for policy-based routing)
        type: string
    type: object
  inframodel.ServerProperty:
    properties:
      cpu:
        $ref: '#/definitions/inframodel.CpuProperty'
      dataDisks:
        items:
          $ref: '#/definitions/inframodel.DiskProperty'
        type: array
      hostname:
        type: string
      interfaces:
        items:
          $ref: '#/definitions/inframodel.NetworkInterfaceProperty'
        type: array
      memory:
        $ref: '#/definitions/inframodel.MemoryProperty'
      os:
        $ref: '#/definitions/inframodel.OsProperty'
      rootDisk:
        $ref: '#/definitions/inframodel.DiskProperty'
      routingTable:
        items:
          $ref: '#/definitions/inframodel.RouteProperty'
        type: array
    type: object
  migration.IdList:
    properties:
      idList:
        items:
          type: string
        type: array
    type: object
  migration.MciInfoList:
    properties:
      mci:
        items:
          $ref: '#/definitions/model.TbMciInfo'
        type: array
    type: object
  model.ConnConfig:
    properties:
      configName:
        type: string
      credentialHolder:
        type: string
      credentialName:
        type: string
      driverName:
        type: string
      providerName:
        type: string
      regionDetail:
        $ref: '#/definitions/model.RegionDetail'
      regionRepresentative:
        type: boolean
      regionZoneInfo:
        $ref: '#/definitions/model.RegionZoneInfo'
      regionZoneInfoName:
        type: string
      verified:
        type: boolean
    type: object
  model.KeyValue:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  model.Location:
    properties:
      display:
        type: string
      latitude:
        type: number
      longitude:
        type: number
    type: object
  model.RegionDetail:
    properties:
      description:
        type: string
      location:
        $ref: '#/definitions/model.Location'
      regionId:
        type: string
      regionName:
        type: string
      zones:
        items:
          type: string
        type: array
    type: object
  model.RegionInfo:
    properties:
      region:
        type: string
      zone:
        type: string
    type: object
  model.RegionZoneInfo:
    properties:
      assignedRegion:
        type: string
      assignedZone:
        type: string
    type: object
  model.StatusCountInfo:
    properties:
      countCreating:
        description: CountCreating is for counting Creating
        type: integer
      countFailed:
        description: CountFailed is for counting Failed
        type: integer
      countRebooting:
        description: CountRebooting is for counting Rebooting
        type: integer
      countResuming:
        description: CountResuming is for counting Resuming
        type: integer
      countRunning:
        description: CountRunning is for counting Running
        type: integer
      countSuspended:
        description: CountSuspended is for counting Suspended
        type: integer
      countSuspending:
        description: CountSuspending is for counting Suspending
        type: integer
      countTerminated:
        description: CountTerminated is for counting Terminated
        type: integer
      countTerminating:
        description: CountTerminating is for counting Terminating
        type: integer
      countTotal:
        description: CountTotal is for Total VMs
        type: integer
      countUndefined:
        description: CountUndefined is for counting Undefined
        type: integer
    type: object
  model.TbMciDynamicReq:
    properties:
      description:
        example: Made in CB-TB
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:no)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        additionalProperties:
          type: string
        description: Label is for describing the object by keywords
        type: object
      name:
        example: mci01
        type: string
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: ""
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmDynamicReq'
        type: array
    required:
    - name
    - vm
    type: object
  model.TbMciInfo:
    properties:
      configureCloudAdaptiveNetwork:
        default: "no"
        description: ConfigureCloudAdaptiveNetwork is an option to configure Cloud
          Adaptive Network (CLADNet) ([yes/no] default:yes)
        enum:
        - "yes"
        - "no"
        example: "yes"
        type: string
      description:
        type: string
      id:
        description: Id is unique identifier for the object
        example: aws-ap-southeast-1
        type: string
      installMonAgent:
        default: "no"
        description: InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no]
          default:no)
        enum:
        - "yes"
        - "no"
        example: "no"
        type: string
      label:
        additionalProperties:
          type: string
        description: Label is for describing the object by keywords
        type: object
      name:
        description: Name is human-readable string to represent the object
        example: aws-ap-southeast-1
        type: string
      newVmList:
        description: List of IDs for new VMs. Return IDs if the VMs are newly added.
          This field should be used for return body only.
        items:
          type: string
        type: array
      placementAlgo:
        type: string
      resourceType:
        description: ResourceType is the type of the resource
        type: string
      status:
        type: string
      statusCount:
        $ref: '#/definitions/model.StatusCountInfo'
      systemLabel:
        description: SystemLabel is for describing the mci in a keyword (any string
          can be used) for special System purpose
        example: Managed by CB-Tumblebug
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      uid:
        description: Uid is universally unique identifier for the object, used for
          labelSelector
        example: wef12awefadf1221edcf
        type: string
      vm:
        items:
          $ref: '#/definitions/model.TbVmInfo'
        type: array
    type: object
  model.TbVmDynamicReq:
    properties:
      commonImage:
        description: CommonImage is field for id of a image in common namespace
        example: ubuntu18.04
        type: string
      commonSpec:
        description: CommonSpec is field for id of a spec in common namespace
        example: aws+ap-northeast-2+t2.small
        type: string
      connectionName:
        description: |-
          if ConnectionName is given, the VM tries to use associtated credential.
          if not, it will use predefined ConnectionName in Spec objects
        type: string
      description:
        example: Description
        type: string
      label:
        additionalProperties:
          type: string
        description: Label is for describing the object by keywords
        type: object
      name:
        description: VM name or subGroup name if is (not empty) && (> 0). If it is
          a group, actual VM name will be generated with -N postfix.
        example: g1-1
        type: string
      rootDiskSize:
        default: default
        description: '"default", Integer (GB): ["50", ..., "1000"]'
        example: default, 30, 42, ...
        type: string
      rootDiskType:
        default: default
        description: '"", "default", "TYPE1", AWS: ["standard", "gp2", "gp3"], Azure:
          ["PremiumSSD", "StandardSSD", "StandardHDD"], GCP: ["pd-standard", "pd-balanced",
          "pd-ssd", "pd-extreme"], ALIBABA: ["cloud_efficiency", "cloud", "cloud_essd"],
          TENCENT: ["CLOUD_PREMIUM", "CLOUD_SSD"]'
        example: default, TYPE1, ...
        type: string
      subGroupSize:
        default: "1"
        description: if subGroupSize is (not empty) && (> 0), subGroup will be generated.
          VMs will be created accordingly.
        example: "3"
        type: string
      vmUserPassword:
        type: string
    required:
    - commonImage
    - commonSpec
    type: object
  model.TbVmInfo:
    properties:
      addtionalDetails:
        items:
          $ref: '#/definitions/model.KeyValue'
        type: array
      connectionConfig:
        $ref: '#/definitions/model.ConnConfig'
      connectionName:
        type: string
      createdTime:
        description: Created time
        example: "2022-11-10 23:00:00"
        type: string
      cspImageName:
        type: string
      cspResourceId:
        description: CspResourceId is resource identifier managed by CSP
        example: csp-06eb41e14121c550a
        type: string
      cspResourceName:
        description: CspResourceName is name assigned to the CSP resource. This name
          is internally used to handle the resource.
        example: we12fawefadf1221edcf
        type: string
      cspSpecName:
        type: string
      cspSshKeyId:
        type: string
      cspSubnetId:
        type: string
      cspVNetId:
        type: string
      dataDiskIds:
        items:
          type: string
        type: array
      description:
        type: string
      id:
        description: Id is unique identifier for the object
        example: aws-ap-southeast-1
        type: string
      imageId:
        type: string
      label:
        additionalProperties:
          type: string
        type: object
      location:
        $ref: '#/definitions/model.Location'
      monAgentStatus:
        description: Montoring agent status
        example: '[installed, notInstalled, failed]'
        type: string
      name:
        description: Name is human-readable string to represent the object
        example: aws-ap-southeast-1
        type: string
      networkAgentStatus:
        description: NetworkAgent status
        example: '[notInstalled, installing, installed, failed]'
        type: string
      networkInterface:
        type: string
      privateDNS:
        type: string
      privateIP:
        type: string
      publicDNS:
        type: string
      publicIP:
        type: string
      region:
        allOf:
        - $ref: '#/definitions/model.RegionInfo'
        description: AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}
      resourceType:
        description: ResourceType is the type of the resource
        type: string
      rootDeviceName:
        type: string
      rootDiskSize:
        type: string
      rootDiskType:
        type: string
      securityGroupIds:
        items:
          type: string
        type: array
      specId:
        type: string
      sshKeyId:
        type: string
      sshPort:
        type: string
      status:
        description: Required by CB-Tumblebug
        type: string
      subGroupId:
        description: defined if the VM is in a group
        type: string
      subnetId:
        type: string
      systemMessage:
        description: Latest system message such as error message
        example: Failed because ...
        type: string
      targetAction:
        type: string
      targetStatus:
        type: string
      uid:
        description: Uid is universally unique identifier for the object, used for
          labelSelector
        example: wef12awefadf1221edcf
        type: string
      vNetId:
        type: string
      vmUserName:
        type: string
      vmUserPassword:
        type: string
    type: object
externalDocs:
  description: ▶▶▶ CB-Tumblebug REST API (access via Beetle's reverse proxy)
  url: http://localhost:8056/tumblebug/api/index.html
host: localhost:8056
info:
  contact:
    name: API Support
    url: https://github.com/cloud-barista/cm-beetle/issues/new/choose
  description: CM-Beetle REST API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: CM-Beetle REST API
  version: latest
paths:
  /httpVersion:
    get:
      consumes:
      - application/json
      description: Checks and logs the HTTP version of the incoming request to the
        server console.
      operationId: CheckHTTPVersion
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check HTTP version of incoming request
      tags:
      - '[Admin] System management'
  /migration/ns/{nsId}/mci:
    get:
      consumes:
      - application/json
      description: Get the migrated multi-cloud infrastructure (MCI)
      operationId: ListInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: info
        description: Option for getting the migrated multi-cloud infrastructure
        enum:
        - info
        - id
        in: query
        name: option
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The info list of the migrated multi-cloud infrastructure (MCI)
          schema:
            $ref: '#/definitions/migration.MciInfoList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
      summary: Get the migrated multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
    post:
      consumes:
      - application/json
      description: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      operationId: MigrateInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - description: Specify the information for the targeted mulci-cloud infrastructure
          (MCI)
        in: body
        name: mciInfo
        required: true
        schema:
          $ref: '#/definitions/controller.MigrateInfraRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully migrated to the multi-cloud infrastructure
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
      summary: Migrate an infrastructure to the multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /migration/ns/{nsId}/mci/{mciId}:
    delete:
      consumes:
      - application/json
      description: Delete the migrated mult-cloud infrastructure (MCI)
      operationId: DeleteInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      - default: terminate
        description: Action for deletion
        enum:
        - terminate
        - force
        in: query
        name: action
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The result of deleting the migrated multi-cloud infrastructure
            (MCI)
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
      summary: Delete the migrated mult-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
    get:
      consumes:
      - application/json
      description: Get the migrated multi-cloud infrastructure (MCI)
      operationId: GetInfra
      parameters:
      - default: mig01
        description: Namespace ID
        in: path
        name: nsId
        required: true
        type: string
      - default: mmci01
        description: Migrated Multi-Cloud Infrastructure (MCI) ID
        in: path
        name: mciId
        required: true
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The migrated multi-cloud infrastructure (MCI) information
          schema:
            $ref: '#/definitions/controller.MigrateInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_cloud-barista_cm-beetle_pkg_api_rest_model_beetle.Response'
      summary: Get the migrated multi-cloud infrastructure (MCI)
      tags:
      - '[Migration] Infrastructure'
  /readyz:
    get:
      consumes:
      - application/json
      description: Check Beetle is ready
      operationId: GetReadyz
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Check Beetle is ready
      tags:
      - '[Admin] System management'
  /recommendation/mci:
    post:
      consumes:
      - application/json
      description: |-
        Recommend an appropriate multi-cloud infrastructure (MCI) for cloud migration

        [Note] `desiredProvider` and `desiredRegion` are required.
        - `desiredProvider` and `desiredRegion` can set on the query parameter or the request body.

        - If desiredProvider and desiredRegion are set on request body, the values in the query parameter will be ignored.
      operationId: RecommendInfra
      parameters:
      - description: Specify the your infrastructure to be migrated
        in: body
        name: UserInfra
        required: true
        schema:
          $ref: '#/definitions/controller.RecommendInfraRequest'
      - default: aws
        description: Provider (e.g., aws, azure, gcp)
        enum:
        - aws
        - azure
        - gcp
        - ncp
        in: query
        name: desiredProvider
        type: string
      - default: ap-northeast-2
        description: Region (e.g., ap-northeast-2)
        in: query
        name: desiredRegion
        type: string
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The result of recommended infrastructure
          schema:
            $ref: '#/definitions/controller.RecommendInfraResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/common.SimpleMsg'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.SimpleMsg'
      summary: Recommend an appropriate multi-cloud infrastructure (MCI) for cloud
        migration
      tags:
      - '[Recommendation] Infrastructure'
  /sample/users:
    get:
      consumes:
      - application/json
      description: Get information of all users.
      operationId: GetUsers
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUsersResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get a list of users
      tags:
      - '[Sample API] Users'
    post:
      consumes:
      - application/json
      description: Create a new user with the given information.
      operationId: CreateUser
      parameters:
      - description: User information
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.CreateUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Create a new user
      tags:
      - '[Sample API] Users'
  /sample/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user with the given information.
      operationId: DeleteUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deletion successful
          schema:
            type: string
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Delete a user
      tags:
      - '[Sample API] Users'
    get:
      consumes:
      - application/json
      description: Get information of a user with a specific ID.
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.GetUserResponse'
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Get specific user information
      tags:
      - '[Sample API] Users'
    patch:
      consumes:
      - application/json
      description: Patch a user with the given information.
      operationId: PatchUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.PatchUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.PatchUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
        "404":
          description: User Not Found
          schema:
            type: object
      summary: Patch a user
      tags:
      - '[Sample API] Users'
    put:
      consumes:
      - application/json
      description: Update a user with the given information.
      operationId: UpdateUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User information to update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/controller.UpdateUserRequest'
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: (Sample) This is a sample description for success response
            in Swagger UI
          schema:
            $ref: '#/definitions/controller.UpdateUserResponse'
        "400":
          description: Invalid Request
          schema:
            type: object
      summary: Update a user
      tags:
      - '[Sample API] Users'
  /test/tracing:
    get:
      consumes:
      - application/json
      description: Test tracing to Tumblebug
      operationId: TestTracing
      parameters:
      - description: 'Custom request ID (NOTE: It will be used as a trace ID.)'
        in: header
        name: X-Request-Id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.SimpleMessage'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/common.SimpleMessage'
      summary: Test tracing to Tumblebug
      tags:
      - '[Test] Utility'
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
