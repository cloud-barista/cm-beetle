// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://cloud-barista.github.io",
            "email": "contact-to-cloud-barista@googlegroups.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/httpVersion": {
            "get": {
                "description": "Checks and logs the HTTP version of the incoming request to the server console.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System management"
                ],
                "summary": "Check HTTP version of incoming request",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/migration/infra": {
            "post": {
                "description": "It migrates an infrastructure on a cloud platform.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Migration] Infrastructure"
                ],
                "summary": "Migrate an infrastructure on a cloud platform",
                "parameters": [
                    {
                        "description": "Specify network, disk, compute, security group, virtual machine, etc.",
                        "name": "InfrastructureInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.MigrateInfraRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully migrated infrastructure on a cloud platform",
                        "schema": {
                            "$ref": "#/definitions/controller.MigrateInfraResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/migration/infra/{infraId}": {
            "get": {
                "description": "It gets the migrated infrastructure on a cloud platform.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Migration] Infrastructure"
                ],
                "summary": "Get the migrated infrastructure on a cloud platform",
                "parameters": [
                    {
                        "type": "string",
                        "description": "a infrastructure ID created for migration",
                        "name": "infraId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully got the migrated infrastructure on a cloud platform",
                        "schema": {
                            "$ref": "#/definitions/controller.MigrateInfraResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "It deletes the migrated infrastructure on a cloud platform.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Migration] Infrastructure"
                ],
                "summary": "Delete the migrated infrastructure on a cloud platform",
                "parameters": [
                    {
                        "type": "string",
                        "description": "a infrastructure ID created for migration",
                        "name": "infraId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the migrated infrastructure on a cloud platform",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.Response"
                        }
                    }
                }
            }
        },
        "/ns": {
            "get": {
                "description": "List all namespaces or namespaces' ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management (To be used)"
                ],
                "summary": "List all namespaces or namespaces' ID",
                "responses": {
                    "200": {
                        "description": "Different return structures by the given option param",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/common.JSONResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "[DEFAULT]": {
                                            "$ref": "#/definitions/common.RestGetAllNsResponse"
                                        },
                                        "[ID]": {
                                            "$ref": "#/definitions/common.IdList"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "post": {
                "description": "Create namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management (To be used)"
                ],
                "summary": "Create namespace",
                "parameters": [
                    {
                        "description": "Details for a new namespace",
                        "name": "nsReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/common.NsReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.NsInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/ns/{nsId}": {
            "get": {
                "description": "Get namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management (To be used)"
                ],
                "summary": "Get namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "ns01",
                        "description": "Namespace ID",
                        "name": "nsId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.NsInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete namespace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Namespace] Namespace management (To be used)"
                ],
                "summary": "Delete namespace",
                "parameters": [
                    {
                        "type": "string",
                        "default": "ns01",
                        "description": "Namespace ID",
                        "name": "nsId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/readyz": {
            "get": {
                "description": "Check Beetle is ready",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Admin] System management"
                ],
                "summary": "Check Beetle is ready",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/recommendation/infra": {
            "post": {
                "description": "It recommends a cloud infrastructure most similar to the input. Infrastructure includes network, storage, compute, and so on.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Recommendation] Infrastructure"
                ],
                "summary": "Recommend an appropriate infrastructure for cloud migration",
                "parameters": [
                    {
                        "description": "Specify network, disk, compute, security group, virtual machine, etc.",
                        "name": "UserInfrastructure",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.RecommendInfraRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully recommended an appropriate infrastructure for cloud migration",
                        "schema": {
                            "$ref": "#/definitions/controller.RecommendInfraResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.SimpleMsg"
                        }
                    }
                }
            }
        },
        "/sample/users": {
            "get": {
                "description": "Get information of all users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Get a list of users",
                "responses": {
                    "200": {
                        "description": "(sample) This is a sample description for success response in Swagger UI",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUsersResponse"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the given information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "(Sample) This is a sample description for success response in Swagger UI",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/sample/users/{id}": {
            "get": {
                "description": "Get information of a user with a specific ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Get specific user information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(Sample) This is a sample description for success response in Swagger UI",
                        "schema": {
                            "$ref": "#/definitions/controller.GetUserResponse"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a user with the given information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information to update",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "(Sample) This is a sample description for success response in Swagger UI",
                        "schema": {
                            "$ref": "#/definitions/controller.UpdateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user with the given information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User deletion successful",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "patch": {
                "description": "Patch a user with the given information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "[Sample API] Users"
                ],
                "summary": "Patch a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information to update",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.PatchUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "(Sample) This is a sample description for success response in Swagger UI",
                        "schema": {
                            "$ref": "#/definitions/controller.PatchUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "User Not Found",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "cloudmodel.HostMigrationReq": {
            "type": "object",
            "required": [
                "commonImage",
                "commonSpec"
            ],
            "properties": {
                "commonImage": {
                    "description": "CommonImage is field for id of a image in common namespace",
                    "type": "string",
                    "example": "ubuntu18.04"
                },
                "commonSpec": {
                    "description": "CommonSpec is field for id of a spec in common namespace",
                    "type": "string",
                    "example": "aws-ap-northeast-2-t2-small"
                },
                "connectionName": {
                    "description": "if ConnectionName is given, the VM tries to use associtated credential.\nif not, it will use predefined ConnectionName in Spec objects",
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "description"
                },
                "label": {
                    "type": "string",
                    "example": "rehosted virtual machine"
                },
                "name": {
                    "description": "VM name or subGroup name if is (not empty) \u0026\u0026 (\u003e 0). If it is a group, actual VM name will be generated with -N postfix.",
                    "type": "string",
                    "example": "g1-1"
                },
                "rootDiskSize": {
                    "description": "\"default\", Integer (GB): [\"50\", ..., \"1000\"]",
                    "type": "string",
                    "example": "default, 30, 42, ..."
                },
                "rootDiskType": {
                    "description": "\"\", \"default\", \"TYPE1\", AWS: [\"standard\", \"gp2\", \"gp3\"], Azure: [\"PremiumSSD\", \"StandardSSD\", \"StandardHDD\"], GCP: [\"pd-standard\", \"pd-balanced\", \"pd-ssd\", \"pd-extreme\"], ALIBABA: [\"cloud_efficiency\", \"cloud\", \"cloud_essd\"], TENCENT: [\"CLOUD_PREMIUM\", \"CLOUD_SSD\"]",
                    "type": "string",
                    "example": "default, TYPE1, ..."
                },
                "subGroupSize": {
                    "description": "if subGroupSize is (not empty) \u0026\u0026 (\u003e 0), subGroup will be gernetad. VMs will be created accordingly.",
                    "type": "string",
                    "default": "1",
                    "example": "3"
                },
                "vmUserPassword": {
                    "type": "string"
                }
            }
        },
        "cloudmodel.RegionInfo": {
            "type": "object",
            "properties": {
                "region": {
                    "type": "string"
                },
                "zone": {
                    "type": "string"
                }
            }
        },
        "cloudmodel.SpiderVMInfo": {
            "type": "object",
            "properties": {
                "cspid": {
                    "description": "VM ID given by CSP (required for registering VM)",
                    "type": "string"
                },
                "dataDiskIIDs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.IID"
                    }
                },
                "dataDiskNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "iid": {
                    "description": "Fields for response",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common.IID"
                        }
                    ]
                },
                "imageIId": {
                    "$ref": "#/definitions/common.IID"
                },
                "imageName": {
                    "type": "string"
                },
                "imageType": {
                    "type": "string"
                },
                "keyPairIId": {
                    "$ref": "#/definitions/common.IID"
                },
                "keyPairName": {
                    "type": "string"
                },
                "keyValueList": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.KeyValue"
                    }
                },
                "name": {
                    "description": "Fields for request",
                    "type": "string"
                },
                "networkInterface": {
                    "description": "ex) eth0",
                    "type": "string"
                },
                "privateDNS": {
                    "type": "string"
                },
                "privateIP": {
                    "type": "string"
                },
                "publicDNS": {
                    "type": "string"
                },
                "publicIP": {
                    "type": "string"
                },
                "region": {
                    "description": "ex) {us-east1, us-east1-c} or {ap-northeast-2}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cloudmodel.RegionInfo"
                        }
                    ]
                },
                "rootDeviceName": {
                    "description": "\"/dev/sda1\", ...",
                    "type": "string"
                },
                "rootDiskSize": {
                    "description": "\"default\", \"50\", \"1000\" (GB)",
                    "type": "string"
                },
                "rootDiskType": {
                    "description": "\"SSD(gp2)\", \"Premium SSD\", ...",
                    "type": "string"
                },
                "securityGroupIIds": {
                    "description": "AWS, ex) sg-0b7452563e1121bb6",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.IID"
                    }
                },
                "securityGroupNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sshaccessPoint": {
                    "type": "string"
                },
                "startTime": {
                    "type": "string"
                },
                "subnetIID": {
                    "description": "AWS, ex) subnet-8c4a53e4",
                    "allOf": [
                        {
                            "$ref": "#/definitions/common.IID"
                        }
                    ]
                },
                "subnetName": {
                    "type": "string"
                },
                "vmspecName": {
                    "description": "Fields for both request and response",
                    "type": "string"
                },
                "vmuserId": {
                    "description": "ex) user1",
                    "type": "string"
                },
                "vmuserPasswd": {
                    "type": "string"
                },
                "vpcIID": {
                    "$ref": "#/definitions/common.IID"
                },
                "vpcname": {
                    "type": "string"
                }
            }
        },
        "cloudmodel.StatusCountInfo": {
            "type": "object",
            "properties": {
                "countCreating": {
                    "description": "CountCreating is for counting Creating",
                    "type": "integer"
                },
                "countFailed": {
                    "description": "CountFailed is for counting Failed",
                    "type": "integer"
                },
                "countRebooting": {
                    "description": "CountRebooting is for counting Rebooting",
                    "type": "integer"
                },
                "countResuming": {
                    "description": "CountResuming is for counting Resuming",
                    "type": "integer"
                },
                "countRunning": {
                    "description": "CountRunning is for counting Running",
                    "type": "integer"
                },
                "countSuspended": {
                    "description": "CountSuspended is for counting Suspended",
                    "type": "integer"
                },
                "countSuspending": {
                    "description": "CountSuspending is for counting Suspending",
                    "type": "integer"
                },
                "countTerminated": {
                    "description": "CountTerminated is for counting Terminated",
                    "type": "integer"
                },
                "countTerminating": {
                    "description": "CountTerminating is for counting Terminating",
                    "type": "integer"
                },
                "countTotal": {
                    "description": "CountTotal is for Total VMs",
                    "type": "integer"
                },
                "countUndefined": {
                    "description": "CountUndefined is for counting Undefined",
                    "type": "integer"
                }
            }
        },
        "cloudmodel.TbVmInfo": {
            "type": "object",
            "properties": {
                "connectionConfig": {
                    "$ref": "#/definitions/common.ConnConfig"
                },
                "connectionName": {
                    "type": "string"
                },
                "createdTime": {
                    "description": "Created time",
                    "type": "string",
                    "example": "2022-11-10 23:00:00"
                },
                "cspViewVmDetail": {
                    "$ref": "#/definitions/cloudmodel.SpiderVMInfo"
                },
                "dataDiskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "idByCSP": {
                    "description": "CSP managed ID or Name",
                    "type": "string"
                },
                "imageId": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/common.Location"
                },
                "monAgentStatus": {
                    "description": "Montoring agent status",
                    "type": "string",
                    "example": "[installed, notInstalled, failed]"
                },
                "name": {
                    "type": "string"
                },
                "networkAgentStatus": {
                    "description": "NetworkAgent status",
                    "type": "string",
                    "example": "[notInstalled, installing, installed, failed]"
                },
                "privateDNS": {
                    "type": "string"
                },
                "privateIP": {
                    "type": "string"
                },
                "publicDNS": {
                    "type": "string"
                },
                "publicIP": {
                    "type": "string"
                },
                "region": {
                    "description": "AWS, ex) {us-east1, us-east1-c} or {ap-northeast-2}",
                    "allOf": [
                        {
                            "$ref": "#/definitions/cloudmodel.RegionInfo"
                        }
                    ]
                },
                "rootDeviceName": {
                    "type": "string"
                },
                "rootDiskSize": {
                    "type": "string"
                },
                "rootDiskType": {
                    "type": "string"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "specId": {
                    "type": "string"
                },
                "sshKeyId": {
                    "type": "string"
                },
                "sshPort": {
                    "type": "string"
                },
                "status": {
                    "description": "Required by CB-Tumblebug",
                    "type": "string"
                },
                "subGroupId": {
                    "description": "defined if the VM is in a group",
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "systemMessage": {
                    "description": "Latest system message such as error message",
                    "type": "string",
                    "example": "Failed because ..."
                },
                "targetAction": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                },
                "vNetId": {
                    "type": "string"
                },
                "vmUserAccount": {
                    "type": "string"
                },
                "vmUserPassword": {
                    "type": "string"
                }
            }
        },
        "common.ConnConfig": {
            "type": "object",
            "properties": {
                "configName": {
                    "type": "string"
                },
                "credentialName": {
                    "type": "string"
                },
                "driverName": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/common.GeoLocation"
                },
                "providerName": {
                    "type": "string"
                },
                "regionName": {
                    "type": "string"
                }
            }
        },
        "common.GeoLocation": {
            "type": "object",
            "properties": {
                "briefAddr": {
                    "type": "string"
                },
                "cloudType": {
                    "type": "string"
                },
                "latitude": {
                    "type": "string"
                },
                "longitude": {
                    "type": "string"
                },
                "nativeRegion": {
                    "type": "string"
                }
            }
        },
        "common.IID": {
            "type": "object",
            "properties": {
                "nameId": {
                    "description": "NameID by user",
                    "type": "string"
                },
                "systemId": {
                    "description": "SystemID by CloudOS",
                    "type": "string"
                }
            }
        },
        "common.IdList": {
            "type": "object",
            "properties": {
                "output": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "common.JSONResult": {
            "type": "object"
        },
        "common.KeyValue": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "common.Location": {
            "type": "object",
            "properties": {
                "display": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "common.NsInfo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description for this namespace"
                },
                "id": {
                    "type": "string",
                    "example": "ns01"
                },
                "name": {
                    "type": "string",
                    "example": "ns01"
                }
            }
        },
        "common.NsReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description for this namespace"
                },
                "name": {
                    "type": "string",
                    "example": "ns01"
                }
            }
        },
        "common.RestGetAllNsResponse": {
            "type": "object",
            "properties": {
                "ns": {
                    "description": "Name string     ` + "`" + `json:\"name\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/common.NsInfo"
                    }
                }
            }
        },
        "common.SimpleMsg": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Any message"
                }
            }
        },
        "controller.CreateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.GetUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.GetUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MyUser"
                    }
                }
            }
        },
        "controller.MigrateInfraRequest": {
            "type": "object",
            "required": [
                "name",
                "vm"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "the infrastructure created for migration"
                },
                "installMonAgent": {
                    "description": "InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)",
                    "type": "string",
                    "default": "yes",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "no"
                },
                "label": {
                    "description": "Label is for describing the mcis in a keyword (any string can be used)",
                    "type": "string",
                    "example": "rehosting infra"
                },
                "name": {
                    "type": "string",
                    "example": "cloud-infra01"
                },
                "systemLabel": {
                    "description": "SystemLabel is for describing the mcis in a keyword (any string can be used) for special System purpose",
                    "type": "string",
                    "example": ""
                },
                "vm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cloudmodel.HostMigrationReq"
                    }
                }
            }
        },
        "controller.MigrateInfraResponse": {
            "type": "object",
            "properties": {
                "configureCloudAdaptiveNetwork": {
                    "description": "ConfigureCloudAdaptiveNetwork is an option to configure Cloud Adaptive Network (CLADNet) ([yes/no] default:yes)",
                    "type": "string",
                    "default": "no",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "yes"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installMonAgent": {
                    "description": "InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)",
                    "type": "string",
                    "default": "yes",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "yes"
                },
                "label": {
                    "description": "Label is for describing the mcis in a keyword (any string can be used)",
                    "type": "string",
                    "example": "User custom label"
                },
                "name": {
                    "type": "string"
                },
                "newVmList": {
                    "description": "List of IDs for new VMs. Return IDs if the VMs are newly added. This field should be used for return body only.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "placementAlgo": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "statusCount": {
                    "$ref": "#/definitions/cloudmodel.StatusCountInfo"
                },
                "systemLabel": {
                    "description": "SystemLabel is for describing the mcis in a keyword (any string can be used) for special System purpose",
                    "type": "string",
                    "example": "Managed by CB-Tumblebug"
                },
                "systemMessage": {
                    "description": "Latest system message such as error message",
                    "type": "string",
                    "example": "Failed because ..."
                },
                "targetAction": {
                    "type": "string"
                },
                "targetStatus": {
                    "type": "string"
                },
                "vm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cloudmodel.TbVmInfo"
                    }
                }
            }
        },
        "controller.PatchUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.PatchUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.RecommendInfraRequest": {
            "type": "object",
            "required": [
                "servers"
            ],
            "properties": {
                "servers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Infra"
                    }
                }
            }
        },
        "controller.RecommendInfraResponse": {
            "type": "object",
            "required": [
                "name",
                "vm"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "the infrastructure created for migration"
                },
                "installMonAgent": {
                    "description": "InstallMonAgent Option for CB-Dragonfly agent installation ([yes/no] default:yes)",
                    "type": "string",
                    "default": "yes",
                    "enum": [
                        "yes",
                        "no"
                    ],
                    "example": "no"
                },
                "label": {
                    "description": "Label is for describing the mcis in a keyword (any string can be used)",
                    "type": "string",
                    "example": "rehosting infra"
                },
                "name": {
                    "type": "string",
                    "example": "cloud-infra01"
                },
                "systemLabel": {
                    "description": "SystemLabel is for describing the mcis in a keyword (any string can be used) for special System purpose",
                    "type": "string",
                    "example": ""
                },
                "vm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/cloudmodel.HostMigrationReq"
                    }
                }
            }
        },
        "controller.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controller.UpdateUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "infra.CPU": {
            "type": "object",
            "required": [
                "cores",
                "cpus",
                "threads"
            ],
            "properties": {
                "cache": {
                    "description": "KB",
                    "type": "integer"
                },
                "cores": {
                    "description": "ea",
                    "type": "integer"
                },
                "cpus": {
                    "description": "ea",
                    "type": "integer"
                },
                "max_speed": {
                    "description": "MHz",
                    "type": "integer"
                },
                "model": {
                    "type": "string"
                },
                "threads": {
                    "description": "ea",
                    "type": "integer"
                },
                "vendor": {
                    "type": "string"
                }
            }
        },
        "infra.Compute": {
            "type": "object",
            "required": [
                "compute_resource",
                "os"
            ],
            "properties": {
                "compute_resource": {
                    "$ref": "#/definitions/infra.ComputeResource"
                },
                "connection": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Connection"
                    }
                },
                "os": {
                    "$ref": "#/definitions/infra.System"
                }
            }
        },
        "infra.ComputeResource": {
            "type": "object",
            "required": [
                "cpu",
                "memory"
            ],
            "properties": {
                "cpu": {
                    "$ref": "#/definitions/infra.CPU"
                },
                "data_disk": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.Disk"
                    }
                },
                "memory": {
                    "$ref": "#/definitions/infra.Memory"
                },
                "root_disk": {
                    "$ref": "#/definitions/infra.Disk"
                }
            }
        },
        "infra.Connection": {
            "type": "object",
            "properties": {
                "keypair": {
                    "$ref": "#/definitions/infra.Keypair"
                }
            }
        },
        "infra.DRM": {
            "type": "object",
            "properties": {
                "driver_date": {
                    "type": "string"
                },
                "driver_description": {
                    "type": "string"
                },
                "driver_name": {
                    "type": "string"
                },
                "driver_version": {
                    "type": "string"
                }
            }
        },
        "infra.Disk": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string"
                },
                "size": {
                    "description": "GB",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "infra.GPU": {
            "type": "object",
            "properties": {
                "drm": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.DRM"
                    }
                },
                "nvidia": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.NVIDIA"
                    }
                }
            }
        },
        "infra.Infra": {
            "type": "object",
            "properties": {
                "compute": {
                    "$ref": "#/definitions/infra.Compute"
                },
                "gpu": {
                    "$ref": "#/definitions/infra.GPU"
                },
                "network": {
                    "$ref": "#/definitions/network.Network"
                },
                "storage": {
                    "$ref": "#/definitions/infra.Storage"
                }
            }
        },
        "infra.Kernel": {
            "type": "object",
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "release": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "infra.Keypair": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "private_key": {
                    "type": "string"
                },
                "public_key": {
                    "type": "string"
                }
            }
        },
        "infra.Memory": {
            "type": "object",
            "required": [
                "size"
            ],
            "properties": {
                "size": {
                    "description": "MB",
                    "type": "integer"
                },
                "speed": {
                    "description": "MHz",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "infra.MountPoint": {
            "type": "object",
            "properties": {
                "mounted_information": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/infra.MountedInformation"
                    }
                }
            }
        },
        "infra.MountedInformation": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "filesystem": {
                    "type": "string"
                },
                "option": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                }
            }
        },
        "infra.NVIDIA": {
            "type": "object",
            "properties": {
                "device_attribute": {
                    "$ref": "#/definitions/infra.NVIDIADeviceAttribute"
                },
                "performance": {
                    "$ref": "#/definitions/infra.NVIDIAPerformance"
                }
            }
        },
        "infra.NVIDIADeviceAttribute": {
            "type": "object",
            "properties": {
                "cuda_version": {
                    "type": "string"
                },
                "driver_version": {
                    "type": "string"
                },
                "gpu_uuid": {
                    "type": "string"
                },
                "product_architecture": {
                    "type": "string"
                },
                "product_brand": {
                    "type": "string"
                },
                "product_name": {
                    "type": "string"
                }
            }
        },
        "infra.NVIDIAPerformance": {
            "type": "object",
            "properties": {
                "bar1_memory_total": {
                    "description": "mb",
                    "type": "integer"
                },
                "bar1_memory_usage": {
                    "description": "percent",
                    "type": "integer"
                },
                "bar1_memory_used": {
                    "description": "mb",
                    "type": "integer"
                },
                "fb_memory_total": {
                    "description": "mb",
                    "type": "integer"
                },
                "fb_memory_usage": {
                    "description": "percent",
                    "type": "integer"
                },
                "fb_memory_used": {
                    "description": "mb",
                    "type": "integer"
                },
                "gpu_usage": {
                    "description": "percent",
                    "type": "integer"
                }
            }
        },
        "infra.Node": {
            "type": "object",
            "properties": {
                "hostname": {
                    "type": "string"
                },
                "hypervisor": {
                    "type": "string"
                },
                "machineid": {
                    "type": "string"
                },
                "timezone": {
                    "type": "string"
                }
            }
        },
        "infra.OS": {
            "type": "object",
            "required": [
                "release",
                "vendor"
            ],
            "properties": {
                "architecture": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "release": {
                    "type": "string"
                },
                "vendor": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "infra.Storage": {
            "type": "object",
            "properties": {
                "mount_point": {
                    "$ref": "#/definitions/infra.MountPoint"
                }
            }
        },
        "infra.System": {
            "type": "object",
            "required": [
                "os"
            ],
            "properties": {
                "kernel": {
                    "$ref": "#/definitions/infra.Kernel"
                },
                "node": {
                    "$ref": "#/definitions/infra.Node"
                },
                "os": {
                    "$ref": "#/definitions/infra.OS"
                }
            }
        },
        "model.MyUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.Response": {
            "type": "object",
            "properties": {
                "details": {
                    "type": "string",
                    "example": "Any details"
                },
                "list": {
                    "type": "array",
                    "items": {}
                },
                "object": {
                    "type": "object",
                    "additionalProperties": true
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "text": {
                    "type": "string",
                    "example": "Any text"
                }
            }
        },
        "network.CSP": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "nlb": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.NLB"
                    }
                },
                "security_group": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.SecurityGroup"
                    }
                },
                "vpc": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.VPC"
                    }
                }
            }
        },
        "network.DNS": {
            "type": "object",
            "properties": {
                "dns_server": {
                    "description": "IPv4 or IPv6 DNS Server Addresses",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "network.FirewallRule": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "allow, deny",
                    "type": "string"
                },
                "direction": {
                    "description": "inbound, outbound",
                    "type": "string"
                },
                "dst": {
                    "type": "string"
                },
                "dst_ports": {
                    "type": "string"
                },
                "priority": {
                    "description": "Lower has higher priority",
                    "type": "integer"
                },
                "protocol": {
                    "description": "TCP, UDP, ICMP",
                    "type": "string"
                },
                "src": {
                    "type": "string"
                },
                "src_ports": {
                    "type": "string"
                }
            }
        },
        "network.Host": {
            "type": "object",
            "properties": {
                "dns": {
                    "$ref": "#/definitions/network.DNS"
                },
                "firewall_rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.FirewallRule"
                    }
                },
                "network_interface": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.NIC"
                    }
                },
                "route": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.Route"
                    }
                }
            }
        },
        "network.NIC": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gateway": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "interface": {
                    "type": "string"
                },
                "mac_address": {
                    "type": "string"
                },
                "mtu": {
                    "type": "integer"
                }
            }
        },
        "network.NLB": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "health_checker": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "listener": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "target_group": {
                    "type": "string"
                }
            }
        },
        "network.Network": {
            "type": "object",
            "properties": {
                "csp": {
                    "$ref": "#/definitions/network.CSP"
                },
                "host": {
                    "$ref": "#/definitions/network.Host"
                }
            }
        },
        "network.Route": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "netmask": {
                    "type": "string"
                },
                "next_hop": {
                    "type": "string"
                }
            }
        },
        "network.SecurityGroup": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "firewall_rule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.FirewallRule"
                    }
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "vnet_id": {
                    "type": "string"
                }
            }
        },
        "network.Subnet": {
            "type": "object",
            "properties": {
                "ipv4_cidr": {
                    "description": "IPv4 Network Address with CIDR Prefix Length",
                    "type": "string"
                },
                "ipv6_cidr": {
                    "description": "IPv6 Network Address with CIDR Prefix Length",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "network.VPC": {
            "type": "object",
            "properties": {
                "address_space": {
                    "description": "IPv4 CIDR or IPv6 CIDR",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "dns_server": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.DNS"
                    }
                },
                "id": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "subnet": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/network.Subnet"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "latest",
	Host:             "",
	BasePath:         "/beetle",
	Schemes:          []string{},
	Title:            "CM-Beetle REST API",
	Description:      "CM-Beetle REST API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
